[{"D:\\codes\\study-video-server\\web\\src\\index.tsx":"1","D:\\codes\\study-video-server\\web\\src\\App.tsx":"2","D:\\codes\\study-video-server\\web\\src\\pages\\Call\\index.tsx":"3","D:\\codes\\study-video-server\\web\\src\\pages\\Call\\styles.ts":"4","D:\\codes\\study-video-server\\web\\src\\pages\\Room\\index.tsx":"5","D:\\codes\\study-video-server\\web\\src\\pages\\Room\\styles.ts":"6"},{"size":219,"mtime":1611430159108,"results":"7","hashOfConfig":"8"},{"size":153,"mtime":1615477683350,"results":"9","hashOfConfig":"8"},{"size":5494,"mtime":1615210272822,"results":"10","hashOfConfig":"8"},{"size":3182,"mtime":1611430046763,"results":"11","hashOfConfig":"8"},{"size":3145,"mtime":1615821026835,"results":"12","hashOfConfig":"8"},{"size":3182,"mtime":1615814611106,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1x4e4df",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\codes\\study-video-server\\web\\src\\index.tsx",[],["29","30"],"D:\\codes\\study-video-server\\web\\src\\App.tsx",["31"],"D:\\codes\\study-video-server\\web\\src\\pages\\Call\\index.tsx",[],["32","33"],"D:\\codes\\study-video-server\\web\\src\\pages\\Call\\styles.ts",[],"D:\\codes\\study-video-server\\web\\src\\pages\\Room\\index.tsx",["34"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Container } from \"./styles\";\r\nimport socketIo from \"socket.io-client\";\r\nimport Peer, { MediaConnection } from \"peerjs\";\r\n\r\nconst username = `web-user: ${(Math.random() * 100).toFixed(0)}`;\r\n\r\nconst socket = socketIo(\"http://10.0.0.108:5555/rooms\", {\r\n  query: { username },\r\n});\r\n\r\nsocket.connect();\r\n\r\ninterface IPeer {\r\n  id: string;\r\n  stream: MediaStream;\r\n}\r\n\r\nconst Call: React.FC = () => {\r\n  const [localVideo, setLocalVideo] = useState<MediaStream | undefined>();\r\n  const [peers, setPeers] = useState<IPeer[]>([]);\r\n  const peerCallObj = useRef<any>({});\r\n\r\n  useEffect(() => {\r\n    navigator.getUserMedia(\r\n      { video: true, audio: true },\r\n      (stream) => {\r\n        setLocalVideo(stream);\r\n\r\n        const myPeer = new Peer({\r\n          host: \"localhost\",\r\n          port: 9000,\r\n          path: \"/myapp\",\r\n        });\r\n\r\n        myPeer.on(\"open\", (peerId) => {\r\n          socket.emit(\"join-room\", { peerId });\r\n        });\r\n\r\n        socket.on(\"users-connected\", (users: any[]) => {\r\n          users.forEach(({ peerId }) => {\r\n            const call = myPeer.call(peerId, stream);\r\n\r\n            call.on(\"stream\", (stream) => addPeer({ id: peerId, stream }));\r\n\r\n            // close is not working\r\n            call.on(\"close\", () => {\r\n              console.log(\"close\", peerId);\r\n              setPeers((oldPeers) => oldPeers.filter((el) => el.id !== peerId));\r\n            });\r\n\r\n            peerCallObj.current[peerId] = call;\r\n          });\r\n        });\r\n\r\n        socket.on(\"user-disconnected\", ({ peerId }: any) => {\r\n          if (peerCallObj.current[peerId]) peerCallObj.current[peerId].close();\r\n        });\r\n\r\n        myPeer.on(\"call\", (call) => {\r\n          call.answer(stream);\r\n\r\n          const peerIdentity = call.peer;\r\n\r\n          peerCallObj.current[peerIdentity] = call;\r\n\r\n          call.on(\"stream\", (stream) => addPeer({ id: peerIdentity, stream }));\r\n\r\n          call.on(\"close\", () => {\r\n            setPeers((oldPeers) =>\r\n              oldPeers.filter((el) => el.id !== peerIdentity)\r\n            );\r\n          });\r\n        });\r\n      },\r\n      () => {}\r\n    );\r\n  }, []);\r\n\r\n  const addPeer = (peer: IPeer) => {\r\n    setPeers((oldPeers) => {\r\n      const exist = oldPeers.map((el) => el.id).includes(peer.id);\r\n      return exist ? oldPeers : [...oldPeers, peer];\r\n    });\r\n  };\r\n\r\n  console.log(peers);\r\n\r\n  return (\r\n    <Container>\r\n      {localVideo && (\r\n        <video\r\n          ref={(video: any) => {\r\n            if (video) {\r\n              video.srcObject = localVideo;\r\n            }\r\n          }}\r\n          playsInline\r\n          autoPlay\r\n          muted\r\n          width={320}\r\n          height={280}\r\n        />\r\n      )}\r\n      {peers.map((peer) => (\r\n        <video\r\n          key={peer.id}\r\n          ref={(video: any) => {\r\n            if (video) {\r\n              video.srcObject = peer.stream;\r\n            }\r\n          }}\r\n          playsInline\r\n          autoPlay\r\n          muted\r\n          width={320}\r\n          height={280}\r\n        />\r\n      ))}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Call;\r\n","D:\\codes\\study-video-server\\web\\src\\pages\\Room\\styles.ts",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":2,"column":8,"nodeType":"41","messageId":"42","endLine":2,"endColumn":12},{"ruleId":"35","replacedBy":"43"},{"ruleId":"37","replacedBy":"44"},{"ruleId":"39","severity":1,"message":"45","line":4,"column":16,"nodeType":"41","messageId":"42","endLine":4,"endColumn":31},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"@typescript-eslint/no-unused-vars","'Call' is defined but never used.","Identifier","unusedVar",["46"],["47"],"'MediaConnection' is defined but never used.","no-global-assign","no-unsafe-negation"]