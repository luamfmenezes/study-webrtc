[{"D:\\codes\\study-video-server\\web\\src\\index.tsx":"1","D:\\codes\\study-video-server\\web\\src\\App.tsx":"2","D:\\codes\\study-video-server\\web\\src\\pages\\Call\\index.tsx":"3","D:\\codes\\study-video-server\\web\\src\\pages\\Call\\styles.ts":"4","D:\\codes\\study-video-server\\web\\src\\pages\\Room\\index.tsx":"5","D:\\codes\\study-video-server\\web\\src\\pages\\Room\\styles.ts":"6"},{"size":219,"mtime":1611430159108,"results":"7","hashOfConfig":"8"},{"size":153,"mtime":1615477683350,"results":"9","hashOfConfig":"8"},{"size":5494,"mtime":1615210272822,"results":"10","hashOfConfig":"8"},{"size":3182,"mtime":1611430046763,"results":"11","hashOfConfig":"8"},{"size":2658,"mtime":1615579441024,"results":"12","hashOfConfig":"8"},{"size":3182,"mtime":1611430046763,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1x4e4df",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\codes\\study-video-server\\web\\src\\index.tsx",[],["29","30"],"D:\\codes\\study-video-server\\web\\src\\App.tsx",["31"],"D:\\codes\\study-video-server\\web\\src\\pages\\Call\\index.tsx",[],["32","33"],"D:\\codes\\study-video-server\\web\\src\\pages\\Call\\styles.ts",[],"D:\\codes\\study-video-server\\web\\src\\pages\\Room\\index.tsx",["34","35"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Container } from \"./styles\";\r\nimport socketIo from \"socket.io-client\";\r\nimport Peer, { MediaConnection } from \"peerjs\";\r\n\r\nconst room = window.location.pathname.split(\"/\")[\r\n  window.location.pathname.split(\"/\").length - 1\r\n];\r\n\r\nconst user = (Math.random() * 100).toFixed(0);\r\n\r\nconst socket = socketIo(\"http://10.0.0.108:5555/rooms\", {\r\n  query: { user, room },\r\n});\r\n\r\nsocket.connect();\r\n\r\nconst myPeer = new Peer({\r\n  host: \"localhost\",\r\n  port: 9000,\r\n  path: \"/myapp\",\r\n});\r\n\r\nconst Call: React.FC = () => {\r\n  const [localVideo, setLocalVideo] = useState<MediaStream | undefined>();\r\n  const [peers, setPeers] = useState<MediaStream[]>([]);\r\n\r\n  useEffect(() => {\r\n    navigator.getUserMedia(\r\n      { video: true, audio: true },\r\n      (stream) => {\r\n        setLocalVideo(stream);\r\n\r\n        socket.on(\"user-connected\", (userId: any) => {\r\n          const call = myPeer.call(userId, stream);\r\n\r\n          console.log(\"declare-on-stream\", call);\r\n\r\n          call.on(\"stream\", (stream) => {\r\n            console.log(\"stream\", stream);\r\n            setPeers((oldPeers) => [...oldPeers, stream]);\r\n          });\r\n\r\n          call.on(\"close\", () => {\r\n            setPeers((oldPeers) => oldPeers.filter((el) => el !== userId));\r\n          });\r\n        });\r\n      },\r\n      (error) => {\r\n        console.warn(error.message);\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    myPeer.on(\"open\", (userId) => {\r\n      socket.emit(\"join-room\", { room, userId });\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    myPeer.on(\"call\", (call) => {\r\n      navigator.getUserMedia(\r\n        { video: true, audio: true },\r\n        (stream) => {\r\n          call.answer(stream);\r\n        },\r\n        () => undefined\r\n      );\r\n      call.on(\"stream\", (userVideoStream) => {\r\n        setPeers((oldPeers) => [...oldPeers, userVideoStream]);\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      {localVideo && (\r\n        <video\r\n          ref={(video: any) => {\r\n            if (video) {\r\n              video.srcObject = localVideo;\r\n            }\r\n          }}\r\n          playsInline\r\n          autoPlay\r\n          muted\r\n          width={320}\r\n          height={280}\r\n        />\r\n      )}\r\n      {peers.map((stream) => (\r\n        <video\r\n          key={Math.random()}\r\n          ref={(video: any) => {\r\n            if (video) {\r\n              video.srcObject = stream;\r\n            }\r\n          }}\r\n          playsInline\r\n          autoPlay\r\n          muted\r\n          width={320}\r\n          height={280}\r\n        />\r\n      ))}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Call;\r\n","D:\\codes\\study-video-server\\web\\src\\pages\\Room\\styles.ts",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":2,"column":8,"nodeType":"42","messageId":"43","endLine":2,"endColumn":12},{"ruleId":"36","replacedBy":"44"},{"ruleId":"38","replacedBy":"45"},{"ruleId":"40","severity":1,"message":"46","line":1,"column":28,"nodeType":"42","messageId":"43","endLine":1,"endColumn":34},{"ruleId":"40","severity":1,"message":"47","line":4,"column":16,"nodeType":"42","messageId":"43","endLine":4,"endColumn":31},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"@typescript-eslint/no-unused-vars","'Call' is defined but never used.","Identifier","unusedVar",["48"],["49"],"'useRef' is defined but never used.","'MediaConnection' is defined but never used.","no-global-assign","no-unsafe-negation"]